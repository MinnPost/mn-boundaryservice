server {
  listen 8080;
  server_name boundaries.minnpost.com;
  return 301 https://$server_name$request_uri;
}

server {
  listen 443 ssl;
  server_name boundaries.minnpost.com;
  ssl on;
  ssl_certificate /etc/nginx/ssl/wildcard.minnpost.com.crt;
  ssl_certificate_key /etc/nginx/ssl/wildcard.minnpost.com.key;
  root /home/ubuntu/mn-boundaryservice;

  location /static {
    autoindex on;
    root /home/ubuntu/mn-boundaryservice;
    expires max;
  }

  location /admin/media/ {
    root /home/ubuntu/mn-boundaryservice/boundaryservice/lib/python2.6/site-packages/django/contrib;
  }

  location / {

    # Pass the request on to Varnish.
    proxy_pass  http://localhost:8000/;

    # Pass a bunch of headers to the downstream server, so they'll know what's going on.
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # Most web apps can be configured to read this header and understand that the current session is actually HTTPS.
    proxy_set_header X-Forwarded-Proto https;

    # We expect the downsteam servers to redirect to the right hostname, so don't do any rewrites here.
    proxy_redirect     off;
    
  }

  # what to serve if upstream is not available or crashes
  error_page 500 502 503 504 /media/50x.html;
}